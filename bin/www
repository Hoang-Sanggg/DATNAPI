#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('datn-webadmin:server');
const socketIo = require('socket.io');
const userModel = require('../models/userModel')
const messageModel = require('../models/messagesModel')
var http = require('http');
require('dotenv').config();


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
console.log(`Server is running on port ${port}`);

const io = socketIo(server);
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);

  // Lưu socketId của người dùng vào MongoDB khi họ kết nối
  socket.on('set-socketId', async (_id) => {
    try {
      const user = await userModel.findById(_id);
      if (user) {
        user.socketId = socket.id;
        await user.save();
      }
      console.log(`SocketId set for user ${_id}: ${socket.id}`);
    } catch (error) {
      console.error('Error setting socketId:', error);
    }
  });

  // Gửi tin nhắn từ người dùng A đến người dùng B
  socket.on('send-message', async (data) => {
    try {
      const { senderId, receiverId, content } = data;
      console.log("check data send message: ", data)
      const newMessage = await messageModel.create({ senderId, receiverId, content });
      const receiverUser = await userModel.findById(receiverId);
      if (receiverUser) {
        io.to(receiverUser.socketId).emit('receive-message', newMessage);
      }
    } catch (error) {
      console.error('Error sending message:', error);
    }
  });

  // Xử lý khi người dùng ngắt kết nối
  socket.on('disconnect', async () => {
    console.log('Client disconnected:', socket.id);
  });
});




/**
 * Listen on provided port, on all network interfaces.
 */



server.listen(port, process.env.IP);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
